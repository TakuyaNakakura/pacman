"""„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÇØ„É©„Çπ„ÇíÂÆöÁæ©„Åô„Çã„É¢„Ç∏„É•„Éº„É´

„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÇØ„É©„Çπ„ÇíÂÆöÁæ©„Åô„Çã.

"""

from item import Item
from player import Player
from block import Block
from typing import Optional


class Field:
    """Field„ÇØ„É©„Çπ
    Field„ÇØ„É©„Çπ„ÅØ„ÄÅ„Ç≤„Éº„É†„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇíË°®„Åô„ÇØ„É©„Çπ„Åß„Åô„ÄÇ
    „Éó„É¨„Ç§„É§„Éº„ÅÆ‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞„Åó„ÄÅField„ÇíË°®Á§∫„Åô„ÇãÊ©üËÉΩ„ÇíÊåÅ„Å°„Åæ„Åô„ÄÇ

    Attributes:
        players (list[Player]): „Éó„É¨„Ç§„É§„Éº„ÅÆ„É™„Çπ„Éà
        field (list[list[str]]): „Éï„Ç£„Éº„É´„Éâ„ÅÆÊÉÖÂ†±
        blocks (list[Block]): „Éñ„É≠„ÉÉ„ÇØ„ÅÆ„É™„Çπ„Éà
        field_size (int): „Éï„Ç£„Éº„É´„Éâ„ÅÆ„Çµ„Ç§„Ç∫
    """

    # Field„ÇØ„É©„Çπ„ÇíÂàùÊúüÂåñ„Åô„ÇãÈñ¢Êï∞
    def __init__(
        self,
        players: list[Player],
        blocks: list[Block],
        field_size: int = 10,
    ) -> None:
        """Field„ÇØ„É©„Çπ„ÅÆ„Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø

        Args:
            players (list[Player]): „Éó„É¨„Ç§„É§„Éº„ÅÆ„É™„Çπ„Éà
            field_size (int): „Éï„Ç£„Éº„É´„Éâ„ÅÆ„Çµ„Ç§„Ç∫
            blocks (list[Block]): „Éñ„É≠„ÉÉ„ÇØ„ÅÆ„É™„Çπ„Éà
        """
        self.players = players
        self.field_size = field_size
        self.blocks = blocks
        self.field = [
            [" " for _ in range(field_size)]
            for _ in range(field_size)
        ]
        self.update_field()

    def update_field(self) -> list[list[str]]:
        """Field„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
        „Éó„É¨„Ç§„É§„Éº„ÅÆ‰ΩçÁΩÆ„ÇíÂèÇÁÖß„Åó„Å¶Field„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞

        Returns:
            list[list[str]]: Êõ¥Êñ∞„Åï„Çå„ÅüField

        Examples:
            >>> p = Player(0, 0)
            >>> field = Field([p])
            >>> field.update_field()[0]
            ['üêØ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
        """

        # field„Çí‰∏ÄÊó¶„Åô„Åπ„Å¶Á©∫ÁôΩ„Å´„Åô„Çã
        for i in range(len(self.field)):
            for j in range(len(self.field[i])):
                self.field[i][j] = " "

        for player in self.players:
            self.field[player.now_y][player.now_x] = player.icon
        for block in self.blocks:
            if block.status:
                self.field[block.now_y][block.now_x] = block.icon
        return self.field

    def check_bump(self, target: Item, items: list[Item]) -> Optional[Item]:
        """
        2„Å§„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰ΩçÁΩÆ„ÅåÈáç„Å™„Å£„Å¶„ÅÑ„Çã„ÅãÂà§ÂÆö„Åô„ÇãÈñ¢Êï∞

        Args:
            target (Item): „Ç¢„Ç§„ÉÜ„É†1
            items (list[Item]): „Ç¢„Ç§„ÉÜ„É†„ÅÆ„É™„Çπ„Éà2

        Returns:
            Item | None: Èáç„Å™„Å£„Å¶„ÅÑ„Çã„Ç¢„Ç§„ÉÜ„É†„Åå„ÅÇ„Çå„Å∞„Åù„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÄÅ„Å™„Åë„Çå„Å∞None
        """
        # Ë°ùÁ™ÅÂà§ÂÆö„ÇíË°å„ÅÜÂá¶ÁêÜ„ÇíË®òËø∞
        for item in items:
            if item.next_x == target.next_x and item.next_y == target.next_y:
                return item
        return None

    def display_field(self) -> None:
        """Field„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
        Field„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞

        Examples:
            >>> p = Player(0, 0)
            >>> field = Field([p])
            >>> field.display_field()
            üêØ         
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
            <BLANKLINE>
        """
        max_width = max(len(row) for row in self.field)

        for row in self.field:
            row_str = "".join(row)
            row_str = row_str.ljust(max_width)
            print(row_str)


if __name__ == "__main__":
    import doctest
    doctest.testmod()
